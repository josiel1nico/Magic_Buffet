/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controler.Festa;
import controler.Pessoa;
import entidadesDAO.FestaDAO;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import entidadesDAO.PessoaDAO;
import java.sql.Time;
import java.util.Calendar;
import javax.swing.JOptionPane;

/**
 *
 * @author Josiel
 */
public class TelaBuscar extends javax.swing.JFrame {

    /**
     * Creates new form TelaBuscar
     */
    DefaultTableModel modelo;

    private TelaBuscar() {
        initComponents();
        interro();
    }
    private static TelaBuscar instance;

    public static TelaBuscar getInstance() {
        if (instance == null) {
            instance = new TelaBuscar();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        cpfText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        ClienteRB = new javax.swing.JRadioButton();
        FestaRB = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        interrogacaoData = new javax.swing.JLabel();
        botaoBuscar = new javax.swing.JButton();
        MonitorRB = new javax.swing.JRadioButton();
        data = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("CPF do Cliente");

        buttonGroup1.add(ClienteRB);
        ClienteRB.setText("Cliente");
        ClienteRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClienteRBActionPerformed(evt);
            }
        });

        buttonGroup1.add(FestaRB);
        FestaRB.setText("Festa");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Data");

        interrogacaoData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/interrogacao_1.png"))); // NOI18N

        botaoBuscar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        botaoBuscar.setText("Buscar");
        botaoBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBuscarActionPerformed(evt);
            }
        });

        buttonGroup1.add(MonitorRB);
        MonitorRB.setText("Monitor");
        MonitorRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonitorRBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(jSeparator1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(42, 42, 42)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(botaoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel1))
                                    .addGap(36, 36, 36)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cpfText, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                        .addComponent(data, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(42, 42, 42)
                                    .addComponent(interrogacaoData)))
                            .addGap(24, 24, 24)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(ClienteRB)
                        .addGap(57, 57, 57)
                        .addComponent(FestaRB)
                        .addGap(59, 59, 59)
                        .addComponent(MonitorRB)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClienteRB)
                    .addComponent(FestaRB)
                    .addComponent(MonitorRB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpfText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(interrogacaoData)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)))
                .addGap(61, 61, 61)
                .addComponent(botaoBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botaoBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBuscarActionPerformed

        if (ClienteRB.isSelected()) {
            PessoaDAO pessoa = new PessoaDAO();
            if (cpfText.getText().equals("")) {
                ArrayList<Pessoa> ListaPessoas = pessoa.buscarPessoas("CLIENTE");
                ResultadoTabela resultado = new ResultadoTabela();
                resultado.tipoPessoa = "CLIENTE";
                modelo = new DefaultTableModel();
                modelo.addColumn("Cliente");
                modelo.addColumn("CPF");
                

                for (int i = 0; i < ListaPessoas.size(); i++) {
                    String Cliente = ListaPessoas.get(i).getPnome();
                    String cpf = ListaPessoas.get(i).getCpf();
                    String[] linha = {Cliente, cpf};
                    modelo.addRow(linha);
                }
                resultado.tabela.setModel(modelo);
                resultado.setVisible(true);

            } else {
                Pessoa p = (Pessoa) pessoa.buscar(cpfText.getText(), "CLIENTE");
                if (p.getPnome() == null) {
                    JOptionPane.showMessageDialog(this, "Cliente nÃ£o encontrado");
                } else {
                    Resultado result = new Resultado();
                    result.setNome(p.getPnome());
                    result.setCpf(p.getCpf());
                    result.setBairro(p.getBairro());
                    result.setTelefone(p.getTelefone());
                    result.setRua(p.getRua());
                    result.setRG(String.valueOf(p.getRg()));
                    result.setNumero(String.valueOf(p.getNumero()));
                    result.setCep(p.getCep());
                    result.setCidadee(p.getCidade());
                    result.textoBairro.setEnabled(false);
                    result.textoNome.setEnabled(false);
                    result.textoCPF.setEnabled(false);
                    result.textoCep.setEnabled(false);
                    result.textoRG.setEnabled(false);
                    result.textoTelefone.setEnabled(false);
                    result.textoRua.setEnabled(false);
                    result.numeroTexto.setEnabled(false);
                    result.textoCidade.setEnabled(false);
                    result.setTipo(Pessoa.CLIENTE);
                    System.out.println(result.getTipo());
                    result.setVisible(true);
                }
            }
        } else if (MonitorRB.isSelected()) {

            PessoaDAO pessoa = new PessoaDAO();
            
            if (cpfText.getText().equals("")) {
                ArrayList<Pessoa> ListaPessoas = pessoa.buscarPessoas("MONITOR");
                ResultadoTabela resultado = new ResultadoTabela();
                resultado.tipoPessoa = "MONITOR";
                modelo = new DefaultTableModel();
                modelo.addColumn("Monitor");
                modelo.addColumn("CPF");

                for (int i = 0; i < ListaPessoas.size(); i++) {
                    String Monitor = ListaPessoas.get(i).getPnome();
                    String cpf = ListaPessoas.get(i).getCpf();
                    String[] linha = {Monitor, cpf};
                    modelo.addRow(linha);
                }
                resultado.tabela.setModel(modelo);
                resultado.setVisible(true);

            } else {
                Pessoa p = (Pessoa) pessoa.buscar(cpfText.getText(), "MONITOR");
                if (p.getPnome() == null) {
                    JOptionPane.showMessageDialog(this, "Monitor nÃ£o encontrado");
                } else {
                    Resultado result = new Resultado();
                    result.setNome(p.getPnome());
                    result.setCpf(p.getCpf());
                    result.setBairro(p.getBairro());
                    result.setTelefone(p.getTelefone());
                    result.setRua(p.getRua());
                    result.setRG(String.valueOf(p.getRg()));
                    result.setNumero(String.valueOf(p.getNumero()));
                    result.setCep(p.getCep());
                    result.setCidadee(p.getCidade());
                    result.textoBairro.setEnabled(false);
                    result.textoNome.setEnabled(false);
                    result.textoCPF.setEnabled(false);
                    result.textoCep.setEnabled(false);
                    result.textoRG.setEnabled(false);
                    result.textoTelefone.setEnabled(false);
                    result.textoRua.setEnabled(false);
                    result.numeroTexto.setEnabled(false);
                    result.textoCidade.setEnabled(false);
                    result.setTipo(Pessoa.MONITOR);
                    System.out.println(result.getTipo());
                    result.setVisible(true);
                }
            }
        }
        else 
            if(FestaRB.isSelected()) {
                Calendar date = data.getCalendar();
                String dataBusca = date.get(Calendar.DAY_OF_MONTH) + "/" + 
                      (date.get(Calendar.MONTH) + 1) 
                        + "/" + date.get(Calendar.YEAR);
                
                FestaDAO festas = new FestaDAO();
                ArrayList<Festa> festa = new ArrayList();
                festa = festas.buscarFesta(dataBusca);
                
                
                
                
                
                ResultadoTabela resultado = new ResultadoTabela();
                
                modelo = new DefaultTableModel();
                modelo.addColumn("Clientes das Festas");
                modelo.addColumn("CPF");
                modelo.addColumn("HorÃ¡rio");
                modelo.addColumn("Id");
                
                


                for (int i = 0; i < festa.size(); i++) {
                    String CpfCliente = festa.get(i).getPessoaCPF();
                    Time horario = festa.get(i).getHoraInicio();
                    PessoaDAO p = new PessoaDAO();
                    Pessoa pessoa = (Pessoa) p.buscar(CpfCliente, Pessoa.CLIENTE);                            
                    String nomeCliente = pessoa.getPnome();
                    String id = festa.get(i).getIdFesta();
                    String[] linha = {nomeCliente,CpfCliente, horario.toString(),id};
                    
                    modelo.addRow(linha);
                }
                
                resultado.tabela.setModel(modelo);
                resultado.setVisible(true);

                
                
                
                
                
        }
    }//GEN-LAST:event_botaoBuscarActionPerformed

    private void MonitorRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonitorRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MonitorRBActionPerformed

    private void ClienteRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClienteRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ClienteRBActionPerformed

    private void interro() {
        interrogacaoData.setToolTipText("Caso deseja procurar as festas de uma determinada data");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaBuscar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaBuscar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaBuscar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaBuscar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TelaBuscar().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ClienteRB;
    private javax.swing.JRadioButton FestaRB;
    private javax.swing.JRadioButton MonitorRB;
    private javax.swing.JButton botaoBuscar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cpfText;
    private com.toedter.calendar.JDateChooser data;
    private javax.swing.JLabel interrogacaoData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
